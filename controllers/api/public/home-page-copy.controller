const Store = require("../../../models/Store");
const Teacher = require("../../../models/Teachers.model");

//@desc get request to index route
//@route /api/v1/home
//@access public
exports.getHomePageData = async (req, res) => {
  try {
    const getNearTeachers = await Teacher.find({
      location: {
        $near: {
          $maxDistance: 500,
          $geometry: {
            type: "Point",
            coordinates: [3.38521, 6.53449],
          },
        },
      },
    });
    return res.status(200).json({ data: getNearTeachers });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Server error" });
  }
};
// @desc get all stores
// @route /api/v1/stores
// @access public
exports.homePageData = async (req, res, next) => {
  try {
    // const stores = await Store.find();
    // return res.status(200).json({
    //   success: true,
    //   storeCount: stores.length,
    //   data: stores,
    // });

    const nearQry = await Store.find({
      location: {
        $near: {
          $maxDistance: 2000000000000000,
          $geometry: {
            type: "Point",
            coordinates: [-73.9667, 40.78],
          },
        },
      },
    });
    return res.status(200).json({ data: nearQry });

    //   const aggLoc = await Store.aggregate([
    //     {
    //       $geoNear: {
    //         near: { type: "Point", coordinates: [3.36649, 6.57761] },
    //         spherical: false,
    //         distanceField: "calcDistance",
    //       },
    //     },
    //   ]);
    //   return res.status(200).json({
    //     success: true,
    //     // storeCount: stores.length,
    //     data: aggLoc,
    //   });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Server error" });
  }
};

// @desc post to stores
// @route /api/v1/stores
// @access public
exports.addStore = async (req, res, next) => {
  try {
    const store = await Store.create(req.body);

    return res.status(200).json({
      success: true,
      data: store,
    });
  } catch (error) {
    console.error(error);

    if (error.code === 11000) {
      return res.status(400).json({ error: "This store already exist" });
    }
    res.status(500).json({ error: "Server error" });
  }
};
